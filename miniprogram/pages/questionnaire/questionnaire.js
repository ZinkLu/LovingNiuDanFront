"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var configs_1 = require("../../configs/configs");
var questionnaireModel_1 = require("./questionnaireModel");
var user_1 = require("./user");
var _today = new Date();
var today_string = _today.getFullYear() + "-" + (_today.getMonth() + 1) + "-" + _today.getDate();
var ChoiceMapping = {
    "Constellation": user_1.Constellation,
    "Education": user_1.Education,
    "Marriage": user_1.Marriage,
    "Gender": user_1.Gender,
};
Page({
    data: {
        userInfo: new questionnaireModel_1.UserInfo(),
        submitted: false,
        today: today_string,
        ConstellationChoice: user_1.Constellation,
        EduChoice: user_1.Education,
        MarriageChoice: user_1.Marriage,
        GenderChoice: user_1.Gender
    },
    onLoad: function (query) {
        console.log(this.data.userInfo.birthDay);
        this.setData({ nickName: query.nickName });
    },
    bindDateChange: function (e) {
        var tmp = this.data.userInfo;
        tmp.birthDay = e.detail.value;
        this.setData({ userInfo: tmp });
    },
    bindSelectorChange: function (e) {
        for (var key in ChoiceMapping) {
            if (Object.prototype.hasOwnProperty.call(ChoiceMapping, key)) {
                var element = ChoiceMapping[key];
                if (e.currentTarget.id.includes(key)) {
                    var choice = element[e.detail.value];
                    var tmp = this.data.userInfo;
                    tmp[key.toLowerCase()] = choice.key;
                    this.setData({ userInfo: tmp });
                }
            }
        }
    },
    submitTable: function (e) {
        var _this = this;
        var payload = JSON.parse(JSON.stringify(this.data.userInfo));
        wx.login({
            success: function (res) {
                wx.request({
                    url: configs_1.config.BASE_URL + "/code",
                    data: { code: res.code },
                    method: "GET",
                    success: function (result) {
                        console.log(result);
                        payload.code = res.code;
                        console.info(payload);
                        wx.request({
                            url: configs_1.config.BASE_URL + "/questionnaire",
                            data: payload,
                            dataType: "json",
                            method: "POST",
                            success: function (req) {
                                _this.makeOrder(res.code, req.data.data.id);
                            },
                            fail: function (req) { console.log(req.errMsg); }
                        });
                    },
                    fail: function () {
                        return;
                    }
                });
            }
        });
    },
    makeOrder: function (code, questionnaire_id) {
        wx.request({
            url: configs_1.config.BASE_URL + "/order",
            data: { code: code, questionnaire_id: questionnaire_id },
            method: "POST",
            success: function (res) {
                console.log("making order now");
                console.log(res);
            }
        });
    },
});
//# sourceMappingURL=data:application/json;base64,