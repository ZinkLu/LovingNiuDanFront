"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var configs_1 = require("../../configs/configs");
var questionnaireModel_1 = require("./questionnaireModel");
var user_1 = require("./user");
var _today = new Date();
var today_string = _today.getFullYear() + "-" + (_today.getMonth() + 1) + "-" + _today.getDate();
var ChoiceMapping = {
    "Constellation": user_1.Constellation,
    "Education": user_1.Education,
    "Marriage": user_1.Marriage,
    "Gender": user_1.Gender,
};
Page({
    data: {
        userInfo: new questionnaireModel_1.UserInfo(),
        submitted: false,
        today: today_string,
        ConstellationChoice: user_1.Constellation,
        EduChoice: user_1.Education,
        MarriageChoice: user_1.Marriage,
        GenderChoice: user_1.Gender
    },
    onLoad: function (query) {
        console.log(this.data.userInfo.birthDay);
        this.setData({ nickName: query.nickName });
    },
    bindDateChange: function (e) {
        var tmp = this.data.userInfo;
        tmp.birthDay = e.detail.value;
        this.setData({ userInfo: tmp });
    },
    bindSelectorChange: function (e) {
        for (var key in ChoiceMapping) {
            if (Object.prototype.hasOwnProperty.call(ChoiceMapping, key)) {
                var element = ChoiceMapping[key];
                if (e.currentTarget.id.includes(key)) {
                    var choice = element[e.detail.value];
                    var tmp = this.data.userInfo;
                    tmp[key.toLowerCase()] = choice.key;
                    this.setData({ userInfo: tmp });
                }
            }
        }
    },
    submitTable: function (e) {
        var _this = this;
        var payload = JSON.parse(JSON.stringify(this.data.userInfo));
        wx.login({
            success: function (res) {
                wx.request({
                    url: configs_1.config.BASE_URL + "/code",
                    data: { code: res.code },
                    method: "GET",
                    success: function (result) {
                        console.log(result);
                        payload.code = res.code;
                        console.info(payload);
                        wx.request({
                            url: configs_1.config.BASE_URL + "/questionnaire",
                            data: payload,
                            dataType: "json",
                            method: "POST",
                            success: function (req) {
                                _this.makeOrder(res.code, req.data.data.id);
                            },
                            fail: function (req) { console.log(req.errMsg); }
                        });
                    },
                    fail: function () {
                        return;
                    }
                });
            }
        });
    },
    makeOrder: function (code, questionnaire_id) {
        var _this = this;
        wx.request({
            url: configs_1.config.BASE_URL + "/order",
            data: { code: code, questionnaire_id: questionnaire_id },
            method: "POST",
            success: function (res) {
                console.log("making order now");
                console.log(res);
                var orderId = res.data.data;
                _this.Pay(orderId, code);
            }
        });
    },
    Pay: function (order_id, code) {
        console.log("\u8BA2\u5355\u53F7 " + order_id);
        wx.request({
            url: configs_1.config.BASE_URL + "/payment",
            data: { code: code, order_id: order_id },
            method: "POST",
            success: function (res) {
                console.log("get payment sign now");
                console.log(res);
                var payLoad = res.data.data;
                var params = __assign(__assign({}, payLoad), { sussces: function (res) {
                        console.log("支付成功");
                        console.log(res.data);
                    }, fail: function (res) {
                        console.log("支付失败");
                        console.log(res.errMsg);
                    } });
                wx.requestPayment(params);
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,