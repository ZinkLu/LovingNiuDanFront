"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var configs_1 = require("../../configs/configs");
var questionnaireModel_1 = require("./questionnaireModel");
var user_1 = require("./user");
var _today = new Date();
var today_string = _today.getFullYear() + "-" + (_today.getMonth() + 1) + "-" + _today.getDate();
var ChoiceMapping = {
    "Constellation": user_1.Constellation,
    "Education": user_1.Education,
    "Marriage": user_1.Marriage,
    "Gender": user_1.Gender,
};
Page({
    data: {
        userInfo: new questionnaireModel_1.UserInfo(),
        submitted: false,
        today: today_string,
        ConstellationChoice: user_1.Constellation,
        EduChoice: user_1.Education,
        MarriageChoice: user_1.Marriage,
        GenderChoice: user_1.Gender
    },
    onLoad: function (query) {
        console.log(this.data.userInfo.birthDay);
        this.setData({ nickName: query.nickName });
    },
    bindDateChange: function (e) {
        var tmp = this.data.userInfo;
        tmp.birthDay = e.detail.value;
        this.setData({ userInfo: tmp });
    },
    bindSelectorChange: function (e) {
        for (var key in ChoiceMapping) {
            if (Object.prototype.hasOwnProperty.call(ChoiceMapping, key)) {
                var element = ChoiceMapping[key];
                if (e.currentTarget.id.includes(key)) {
                    var choice = element[e.detail.value];
                    var tmp = this.data.userInfo;
                    tmp[key.toLowerCase()] = choice.key;
                    this.setData({ userInfo: tmp });
                }
            }
        }
    },
    submitTable: function (e) {
        var payload = JSON.parse(JSON.stringify(this.data.userInfo));
        wx.login({
            success: function (res) {
                wx.request({
                    url: configs_1.config.BASE_URL + "/code",
                    data: { code: res.code },
                    method: "GET",
                    success: function (result) {
                        console.log(result);
                        payload.code = res.code;
                        console.info(payload);
                        wx.request({
                            url: configs_1.config.BASE_URL + "/questionnaire",
                            data: payload,
                            dataType: "json",
                            method: "POST",
                            success: function (req) { console.log(req.data); },
                            fail: function (req) { console.log(req.errMsg); }
                        });
                    },
                    fail: function () {
                        return;
                    }
                });
            }
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3Rpb25uYWlyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInF1ZXN0aW9ubmFpcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxpREFBOEM7QUFDOUMsMkRBQStDO0FBQy9DLCtCQUFtRTtBQUVuRSxJQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFBO0FBQ3ZCLElBQUksWUFBWSxHQUFNLE1BQU0sQ0FBQyxXQUFXLEVBQUUsVUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxVQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUksQ0FBQTtBQUV6RixJQUFNLGFBQWEsR0FBRztJQUNwQixlQUFlLEVBQUUsb0JBQWE7SUFDOUIsV0FBVyxFQUFFLGdCQUFTO0lBQ3RCLFVBQVUsRUFBRSxlQUFRO0lBQ3BCLFFBQVEsRUFBRSxhQUFNO0NBQ2pCLENBQUE7QUFFRCxJQUFJLENBQ0Y7SUFDRSxJQUFJLEVBQUU7UUFFSixRQUFRLEVBQUUsSUFBSSw2QkFBUSxFQUFFO1FBR3hCLFNBQVMsRUFBRSxLQUFLO1FBQ2hCLEtBQUssRUFBRSxZQUFZO1FBRW5CLG1CQUFtQixFQUFFLG9CQUFhO1FBQ2xDLFNBQVMsRUFBRSxnQkFBUztRQUNwQixjQUFjLEVBQUUsZUFBUTtRQUN4QixZQUFZLEVBQUUsYUFBTTtLQUNyQjtJQUNELE1BQU0sRUFBTixVQUFPLEtBQTZCO1FBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDeEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsY0FBYyxFQUFkLFVBQWUsQ0FBTTtRQUNuQixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQTtRQUM1QixHQUFHLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFBO1FBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTtJQUNqQyxDQUFDO0lBRUQsa0JBQWtCLEVBQWxCLFVBQW1CLENBQU07UUFDdkIsS0FBSyxJQUFNLEdBQUcsSUFBSSxhQUFhLEVBQUU7WUFDL0IsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUM1RCxJQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBRWxDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUNwQyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtvQkFDdEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUE7b0JBQzVCLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFBO29CQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7aUJBQ2hDO2FBQ0Y7U0FDRjtJQUNILENBQUM7SUFFRCxXQUFXLEVBQVgsVUFBWSxDQUFNO1FBTWhCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7UUFFNUQsRUFBRSxDQUFDLEtBQUssQ0FBQztZQUNQLE9BQU8sRUFBRSxVQUFDLEdBQUc7Z0JBQ1gsRUFBRSxDQUFDLE9BQU8sQ0FBQztvQkFDVCxHQUFHLEVBQUUsZ0JBQU0sQ0FBQyxRQUFRLEdBQUcsT0FBTztvQkFDOUIsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUU7b0JBQ3hCLE1BQU0sRUFBRSxLQUFLO29CQUNiLE9BQU8sRUFBRSxVQUFDLE1BQU07d0JBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTt3QkFDbkIsT0FBTyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFBO3dCQUd2QixPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO3dCQUNyQixFQUFFLENBQUMsT0FBTyxDQUNSOzRCQUNFLEdBQUcsRUFBRSxnQkFBTSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0I7NEJBQ3ZDLElBQUksRUFBRSxPQUFPOzRCQUNiLFFBQVEsRUFBRSxNQUFNOzRCQUNoQixNQUFNLEVBQUUsTUFBTTs0QkFDZCxPQUFPLEVBQUUsVUFBQyxHQUFHLElBQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQyxDQUFDOzRCQUMzQyxJQUFJLEVBQUUsVUFBQyxHQUFHLElBQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQyxDQUFDO3lCQUMzQyxDQUNGLENBQUE7b0JBQ0gsQ0FBQztvQkFDRCxJQUFJLEVBQUU7d0JBQ0osT0FBTTtvQkFDUixDQUFDO2lCQUNGLENBQUMsQ0FBQTtZQUNKLENBQUM7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDO0NBSUYsQ0FDRixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tIFwiLi4vLi4vY29uZmlncy9jb25maWdzXCJcbmltcG9ydCB7IFVzZXJJbmZvIH0gZnJvbSBcIi4vcXVlc3Rpb25uYWlyZU1vZGVsXCJcbmltcG9ydCB7IENvbnN0ZWxsYXRpb24sIEVkdWNhdGlvbiwgTWFycmlhZ2UsIEdlbmRlciB9IGZyb20gXCIuL3VzZXJcIlxuXG5sZXQgX3RvZGF5ID0gbmV3IERhdGUoKVxubGV0IHRvZGF5X3N0cmluZyA9IGAke190b2RheS5nZXRGdWxsWWVhcigpfS0ke190b2RheS5nZXRNb250aCgpICsgMX0tJHtfdG9kYXkuZ2V0RGF0ZSgpfWBcblxuY29uc3QgQ2hvaWNlTWFwcGluZyA9IHtcbiAgXCJDb25zdGVsbGF0aW9uXCI6IENvbnN0ZWxsYXRpb24sXG4gIFwiRWR1Y2F0aW9uXCI6IEVkdWNhdGlvbixcbiAgXCJNYXJyaWFnZVwiOiBNYXJyaWFnZSxcbiAgXCJHZW5kZXJcIjogR2VuZGVyLFxufVxuXG5QYWdlKFxuICB7XG4gICAgZGF0YToge1xuXG4gICAgICB1c2VySW5mbzogbmV3IFVzZXJJbmZvKCksXG5cbiAgICAgIC8vIGNvbnRyb2xcbiAgICAgIHN1Ym1pdHRlZDogZmFsc2UsXG4gICAgICB0b2RheTogdG9kYXlfc3RyaW5nLFxuXG4gICAgICBDb25zdGVsbGF0aW9uQ2hvaWNlOiBDb25zdGVsbGF0aW9uLFxuICAgICAgRWR1Q2hvaWNlOiBFZHVjYXRpb24sXG4gICAgICBNYXJyaWFnZUNob2ljZTogTWFycmlhZ2UsXG4gICAgICBHZW5kZXJDaG9pY2U6IEdlbmRlclxuICAgIH0sXG4gICAgb25Mb2FkKHF1ZXJ5OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSB7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLmRhdGEudXNlckluZm8uYmlydGhEYXkpXG4gICAgICB0aGlzLnNldERhdGEoeyBuaWNrTmFtZTogcXVlcnkubmlja05hbWUgfSlcbiAgICB9LFxuXG4gICAgYmluZERhdGVDaGFuZ2UoZTogYW55KSB7XG4gICAgICBsZXQgdG1wID0gdGhpcy5kYXRhLnVzZXJJbmZvXG4gICAgICB0bXAuYmlydGhEYXkgPSBlLmRldGFpbC52YWx1ZVxuICAgICAgdGhpcy5zZXREYXRhKHsgdXNlckluZm86IHRtcCB9KVxuICAgIH0sXG5cbiAgICBiaW5kU2VsZWN0b3JDaGFuZ2UoZTogYW55KSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBDaG9pY2VNYXBwaW5nKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoQ2hvaWNlTWFwcGluZywga2V5KSkge1xuICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBDaG9pY2VNYXBwaW5nW2tleV1cblxuICAgICAgICAgIGlmIChlLmN1cnJlbnRUYXJnZXQuaWQuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29uc3QgY2hvaWNlID0gZWxlbWVudFtlLmRldGFpbC52YWx1ZV1cbiAgICAgICAgICAgIGxldCB0bXAgPSB0aGlzLmRhdGEudXNlckluZm9cbiAgICAgICAgICAgIHRtcFtrZXkudG9Mb3dlckNhc2UoKV0gPSBjaG9pY2Uua2V5XG4gICAgICAgICAgICB0aGlzLnNldERhdGEoeyB1c2VySW5mbzogdG1wIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN1Ym1pdFRhYmxlKGU6IGFueSkge1xuICAgICAgLy8g6aqM6K+BXG4gICAgICAvLyBjb25zb2xlLmluZm8oZSlcbiAgICAgIC8vIGlmICghY2hlY2tJbnB1dHModGhpcy5kYXRhLnVzZXJJbmZvKSkge1xuICAgICAgLy8gfVxuXG4gICAgICB2YXIgcGF5bG9hZCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhLnVzZXJJbmZvKSlcblxuICAgICAgd3gubG9naW4oe1xuICAgICAgICBzdWNjZXNzOiAocmVzKSA9PiB7XG4gICAgICAgICAgd3gucmVxdWVzdCh7XG4gICAgICAgICAgICB1cmw6IGNvbmZpZy5CQVNFX1VSTCArIFwiL2NvZGVcIixcbiAgICAgICAgICAgIGRhdGE6IHsgY29kZTogcmVzLmNvZGUgfSxcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgIHN1Y2Nlc3M6IChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KVxuICAgICAgICAgICAgICBwYXlsb2FkLmNvZGUgPSByZXMuY29kZVxuICAgICAgICAgICAgICAvLyDlj5HpgIHor7fmsYJcblxuICAgICAgICAgICAgICBjb25zb2xlLmluZm8ocGF5bG9hZClcbiAgICAgICAgICAgICAgd3gucmVxdWVzdChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICB1cmw6IGNvbmZpZy5CQVNFX1VSTCArIFwiL3F1ZXN0aW9ubmFpcmVcIixcbiAgICAgICAgICAgICAgICAgIGRhdGE6IHBheWxvYWQsXG4gICAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgICAgc3VjY2VzczogKHJlcSkgPT4geyBjb25zb2xlLmxvZyhyZXEuZGF0YSkgfSxcbiAgICAgICAgICAgICAgICAgIGZhaWw6IChyZXEpID0+IHsgY29uc29sZS5sb2cocmVxLmVyck1zZykgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZhaWw6ICgpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuXG5cblxuICB9XG4pXG5cbiJdfQ==